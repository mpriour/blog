<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Matt Priour&#39;s Ramblings</title>
    <link>./posts/</link>
    <description>Recent content in Posts on Matt Priour&#39;s Ramblings</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="./posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chrome and Modules</title>
      <link>./posts/chrome-and-modules/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>./posts/chrome-and-modules/</guid>
      <description>Chrome is ready for modules but the Modules aren&amp;rsquo;t ready for Chrome As of Chrome 61 (released September 2017) and Safari 10.1 (released March 2017) we&amp;rsquo;ve had browsers that were for all intents and purposes ES6 complete, including full support of Modules. Ideally, when developing, you should be able to use all the features of ES6 and the convenience of modules without the need for a transpiler like Babel or other build tools / file watchers.</description>
    </item>
    
    <item>
      <title>Using the Clipboard APIs</title>
      <link>./posts/clipboard/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>./posts/clipboard/</guid>
      <description>If you&amp;rsquo;ve ever wanted a way for a user to copy information in a different format or control what exactly gets copied from areas of your page, then the Cliboard API &amp;amp; the execCommand API are very useful. However reading specs and limitations between different browsers makes it seem more complicated and limiting to use than it is.
Let say you have contact information that you want to display in a nice card layout on the screen.</description>
    </item>
    
  </channel>
</rss>